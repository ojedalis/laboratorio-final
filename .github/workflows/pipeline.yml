name: Carmen Ojeda Laboratorio Final

on:
  push:
    branches:
      - main
      - '**'
  workflow_dispatch:

permissions:
  pull-requests: read

jobs:
  SAST:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set Environment Variables
        run: echo "BRANCH_NAME=${{ github.ref_name}}" >> $GITHUB_ENV

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args:
            -Dsonar.projectKey="ojedalis"
            -Dsonar.organization="ojedalis"
          projectBaseDir: .

      - name: Validate Quality Gate
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          REPO_NAME: ${{ github.event.repository.name }}
        run: |
          echo "Validando el estado del Quality Gate..."
          analysisId=$(curl -s -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/ce/component?component=$REPO_NAME" | jq -r '.current.analysisId')

          qualityGateStatus=$(curl -s -u "$SONAR_TOKEN:" \
            "https://sonarcloud.io/api/qualitygates/project_status?analysisId=$analysisId" | jq -r '.projectStatus.status')

          if [ "$qualityGateStatus" != "OK" ]; then
            echo "El proyecto no cumple con el Quality Gate: $qualityGateStatus."
            echo "Verificando vulnerabilidades críticas..."
            vulnerabilities=$(curl -s -u "$SONAR_TOKEN:" \
              "https://sonarcloud.io/api/issues/search?componentKeys=$REPO_NAME&types=VULNERABILITY&severities=CRITICAL,BLOCKER" | jq -r '.total')

            if [ "$vulnerabilities" -gt 0 ]; then
              echo "Se encontraron $vulnerabilities vulnerabilidades críticas. El proyecto no cumple con los estándares de seguridad."
              exit 1
            fi
          else
            echo "El proyecto cumple con el Quality Gate y no tiene vulnerabilidades críticas. Continuando sin problemas."
          fi

  SCA:
    needs: SAST
    runs-on: ubuntu-latest
    steps:

    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Dependency Check
      uses: dependency-check/Dependency-Check_Action@1.1.0
      id: Depcheck
      with:
        project: '${{ github.event.repository.name }}'
        path: '.'
        format: 'HTML'
        args: >
          --out ./reports
          --failOnCVSS 7
          --enableRetired

    - name: Upload Test Result
      uses: actions/upload-artifact@master
      with:
        name: Depcheck Report
        path: ./reports

  Build:
    needs: SCA
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker Login
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker build
        run: |
          ls -R
          docker build -t ojedalis/laboratorio-final:latest .

      - name: Push Docker
        run: |
          docker push ojedalis/laboratorio-final:latest
          
  VulnScan:
    needs: Build
    runs-on: ubuntu-latest
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: 'ojedalis/laboratorio-final:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
